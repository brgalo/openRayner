#version 460

#extension GL_EXT_ray_tracing : require


#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

struct Constants {
  uint64_t indexBufferAdress;
  uint64_t vertexBuffer;
//  uint64_t oriBuffer;
//  uint64_t dirBuffer;
//  uint64_t hitBuffer;
//  uint64_t triangleIndex;
//  uint64_t nRays;
//  bool recordOri;
//  bool recordDir;
//  bool recordHit;
};

struct RayPayload {
    bool hit;
    float energy;
};

layout(buffer_reference, std430, buffer_reference_align = 4) readonly buffer Indices{
    uint idx[];
};

layout(push_constant) uniform _Constants { Constants consts;};

layout(location = 0) rayPayloadEXT RayPayload payload;

layout(set = 0, binding = 0) uniform accelerationStructureEXT scene;
layout(set = 0, binding = 1) buffer buf{
    vec3 data[];
};

void main() {

    Indices indices = Indices(consts.indexBufferAdress);

    uvec2 pixel = gl_LaunchIDEXT.xy;
    vec3 pos = vec3(0,0,-1);
    vec3 dir = vec3(0,0,1);

    payload.hit = true;
    data[pixel.x].x = pixel.x*pixel.x;

    traceRayEXT(
        scene,
        gl_RayFlagsOpaqueEXT,
        0xFF,
        0,
        0,
        0,
        pos,
        0.0,
        dir,
        1000,
        0
    );
    if(payload.hit == false) {
        data[pixel.x].y = 1;
    }
    data[pixel.x].z = float(indices.idx[pixel.x+18]);
}