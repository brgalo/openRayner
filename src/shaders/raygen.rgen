#version 460

#extension GL_EXT_ray_tracing : require

#include "common.glsl"
#include "random.glsl"

layout(buffer_reference, std430, buffer_reference_align = 4) readonly buffer Indices{uint idx[];};
layout(buffer_reference, scalar) readonly buffer Vertices{Vertex vert[];};
layout(buffer_reference, scalar) buffer oriBuffer{vec4 ori[];};
layout(buffer_reference, scalar) buffer dirBuffer{vec4 dir[];};
layout(buffer_reference, scalar) buffer hitBuffer{float val[];};

layout(push_constant) uniform _Constants { Constants consts;};

layout(location = 0) rayPayloadEXT RayPayload payload;

layout(set = 0, binding = 0) uniform accelerationStructureEXT scene;

void main() {

    Indices indices = Indices(consts.indexBufferAddress);
    Vertices vertex = Vertices(consts.vertexBufferAddress);
    oriBuffer oriBuf = oriBuffer(consts.oriBufferAddress);
    dirBuffer dirBuf = dirBuffer(consts.dirBufferAddress);
    hitBuffer hitBuf = hitBuffer(consts.hitBufferAddress);
    
    uvec2 pixel = gl_LaunchIDEXT.xy;
    uint rowOffset = pixel.x * uint((consts.nTriangles + 1));
    uint seed = tea(pixel.x, pixel.y);

    // get the vertices
    vec3 o_base = vertex.vert[indices.idx[uint(consts.triangleIndex) * 3 + 0]].position;
    vec3 base_1 = vertex.vert[indices.idx[uint(consts.triangleIndex) * 3 + 1]].position - o_base;
    vec3 base_2 = vertex.vert[indices.idx[uint(consts.triangleIndex) * 3 + 2]].position - o_base;
    vec3 normal = normalize(cross(base_1, base_2));
    vec3 base_star = normalize(cross(base_1, normal));

    // random vals for random point sampling
    float r = rnd(seed);
    float s = rnd(seed);

    // mirror points back, if outside of triangle
    if (r + s >=1) {
        r = 1-r;
        s = 1-s;
    }
    vec3 ori = o_base + base_1*r + base_2*s;

    // random vals for random dir sampling
    float phi =  acos(2*rnd(seed)-1);
    float teta = rnd(seed)*radians(360);
    vec3 dir = cos(phi)*(sin(teta)*base_star+
                     cos(teta)*normalize(base_1))+sin(phi)*normal;

    traceRayEXT(
        scene,
        gl_RayFlagsOpaqueEXT,
        0xFF,
        0,
        0,
        0,
        ori+0.1*normal,
        0.0,
        dir,
        1000,
        0
    );

    vec3 hitPoint;
    if(payload.hitIdx>=0) {
        hitPoint  =   (1-payload.uv.x-payload.uv.y)*(vertex.vert[indices.idx[payload.hitIdx*3 + 0]].position) + 
                      payload.uv.x*(vertex.vert[indices.idx[payload.hitIdx*3 + 1]].position) +
                      payload.uv.y*(vertex.vert[indices.idx[payload.hitIdx*3 + 2]].position);
    } else {
        hitPoint = ori+0.2*dir;
    }
    

    oriBuf.ori[pixel.x] = vec4(ori,payload.energy);
    dirBuf.dir[pixel.x] =  vec4(hitPoint,payload.energy);
}