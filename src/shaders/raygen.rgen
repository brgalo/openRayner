#version 460

#extension GL_EXT_ray_tracing : require

#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "structs.h"
#include "random.glsl"

struct Constants {
  uint64_t indexBufferAddress;
  uint64_t vertexBufferAddress;
  uint64_t oriBufferAddress;
  uint64_t dirBufferAddress;
//  uint64_t hitBuffer;
  uint64_t triangleIndex;
//  uint64_t nRays;
//  bool recordOri;
//  bool recordDir;
//  bool recordHit;
};

struct RayPayload {
    bool hit;
    float energy;
};

struct Vertex {
    vec3 position;
    vec3 color;
    vec3 normal;
    vec2 uv;
};

layout(buffer_reference, std430, buffer_reference_align = 4) readonly buffer Indices{
    uint idx[];
};

layout(buffer_reference, scalar) readonly buffer Vertices{
    Vertex vert[];
};

layout(buffer_reference, scalar) buffer oriBuffer{vec4 ori[];};
layout(buffer_reference, scalar) buffer dirBuffer{vec4 dir[];};

layout(push_constant) uniform _Constants { Constants consts;};

layout(location = 0) rayPayloadEXT RayPayload payload;

layout(set = 0, binding = 0) uniform accelerationStructureEXT scene;
layout(set = 0, binding = 1) buffer buf{
    vec4 data[];
};

void main() {

    Indices indices = Indices(consts.indexBufferAddress);
    Vertices vertex = Vertices(consts.vertexBufferAddress);
    oriBuffer oriBuf = oriBuffer(consts.oriBufferAddress);
    dirBuffer dirBuf = dirBuffer(consts.dirBufferAddress);
    
    uvec2 pixel = gl_LaunchIDEXT.xy;
    uint seed = tea(pixel.x, pixel.y);

    // get the vertices
    vec3 o_base = vertex.vert[indices.idx[uint(consts.triangleIndex) * 3 + 0]].position;
    vec3 base_1 = vertex.vert[indices.idx[uint(consts.triangleIndex) * 3 + 1]].position - o_base;
    vec3 base_2 = vertex.vert[indices.idx[uint(consts.triangleIndex) * 3 + 2]].position - o_base;
    vec3 normal = normalize(cross(base_1, base_2));
    vec3 base_star = normalize(cross(base_1, normal));

    // random vals for random point sampling
    float r = rnd(seed);
    float s = rnd(seed);

    // mirror points back, if outside of triangle
    if (r + s >=1) {
        r = 1-r;
        s = 1-s;
    }
    vec3 ori = o_base + base_1*r + base_2*s;

    // random vals for random dir sampling
    float phi =  acos(2*rnd(seed)-1);
    float teta = rnd(seed)*radians(360);
    vec3 dir = cos(phi)*(sin(teta)*base_star+
                     cos(teta)*normalize(base_1))+sin(phi)*normal;

    payload.hit = false;

    traceRayEXT(
        scene,
        gl_RayFlagsOpaqueEXT,
        0xFF,
        0,
        0,
        0,
        ori+0.001*normal,
        0.0,
        dir,
        1000,
        0
    );



    oriBuf.ori[pixel.x] = vec4(ori,payload.hit);
    if(pixel.x % 1 == 0) dirBuf.dir[pixel.x] =  vec4(dir+ori,payload.hit);
}